(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[216],{4478:function(e,n,s){(window.__NEXT_P=window.__NEXT_P||[]).push(["/gpu",function(){return s(3625)}])},6902:function(e,n,s){"use strict";var i=s(5893);n.Z=e=>{let{id:n,description:s,children:c,source:r}=e,a=r?(0,i.jsxs)(i.Fragment,{children:["(See"," ",(0,i.jsx)("a",{href:r,target:"_blank",rel:"noopener noreferrer",children:"source"}),")"]}):(0,i.jsx)(i.Fragment,{});return(0,i.jsxs)("div",{className:"figure",children:[(0,i.jsx)("label",{id:n}),c,(0,i.jsxs)("label",{children:[s," ",a]})]})}},3625:function(e,n,s){"use strict";s.r(n),s.d(n,{default:function(){return o}});var i=s(5893),c=s(6282),r=s(7090),a=s(6902);let t=function(e){let{children:n}=e;return(0,i.jsx)(r.Z,{active:"gpu",children:(0,i.jsx)("div",{className:"content",children:n})})};function l(e){let n={a:"a",blockquote:"blockquote",br:"br",code:"code",details:"details",div:"div",em:"em",h1:"h1",h2:"h2",h3:"h3",hr:"hr",img:"img",li:"li",nav:"nav",ol:"ol",p:"p",pre:"pre",span:"span",strong:"strong",summary:"summary",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,c.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.nav,{className:"toc",children:(0,i.jsxs)(n.ol,{className:"toc-level toc-level-1",children:[(0,i.jsx)(n.li,{className:"toc-item toc-item-h1",children:(0,i.jsx)(n.a,{className:"toc-link toc-link-h1",href:"#taxonomy",children:"Taxonomy"})}),(0,i.jsx)(n.li,{className:"toc-item toc-item-h1",children:(0,i.jsx)(n.a,{className:"toc-link toc-link-h1",href:"#gpgpu",children:"GPGPU"})}),(0,i.jsx)(n.li,{className:"toc-item toc-item-h1",children:(0,i.jsx)(n.a,{className:"toc-link toc-link-h1",href:"#opencl",children:"OpenCL"})}),(0,i.jsxs)(n.li,{className:"toc-item toc-item-h1",children:[(0,i.jsx)(n.a,{className:"toc-link toc-link-h1",href:"#cuda-nvidia",children:"CUDA (NVIDIA)"}),(0,i.jsxs)(n.ol,{className:"toc-level toc-level-2",children:[(0,i.jsx)(n.li,{className:"toc-item toc-item-h2",children:(0,i.jsx)(n.a,{className:"toc-link toc-link-h2",href:"#terminology",children:"Terminology"})}),(0,i.jsx)(n.li,{className:"toc-item toc-item-h2",children:(0,i.jsx)(n.a,{className:"toc-link toc-link-h2",href:"#streaming-multiprocessor-sm",children:"Streaming Multiprocessor (SM)"})}),(0,i.jsx)(n.li,{className:"toc-item toc-item-h2",children:(0,i.jsx)(n.a,{className:"toc-link toc-link-h2",href:"#brief",children:"Brief"})}),(0,i.jsx)(n.li,{className:"toc-item toc-item-h2",children:(0,i.jsx)(n.a,{className:"toc-link toc-link-h2",href:"#cuda-programming-model",children:"CUDA programming model"})}),(0,i.jsxs)(n.li,{className:"toc-item toc-item-h2",children:[(0,i.jsx)(n.a,{className:"toc-link toc-link-h2",href:"#core",children:"Core"}),(0,i.jsxs)(n.ol,{className:"toc-level toc-level-3",children:[(0,i.jsx)(n.li,{className:"toc-item toc-item-h3",children:(0,i.jsx)(n.a,{className:"toc-link toc-link-h3",href:"#cuda-core",children:"CUDA core"})}),(0,i.jsx)(n.li,{className:"toc-item toc-item-h3",children:(0,i.jsx)(n.a,{className:"toc-link toc-link-h3",href:"#tensor-core",children:"Tensor core"})})]})]}),(0,i.jsxs)(n.li,{className:"toc-item toc-item-h2",children:[(0,i.jsx)(n.a,{className:"toc-link toc-link-h2",href:"#units",children:"Units"}),(0,i.jsxs)(n.ol,{className:"toc-level toc-level-3",children:[(0,i.jsx)(n.li,{className:"toc-item toc-item-h3",children:(0,i.jsx)(n.a,{className:"toc-link toc-link-h3",href:"#special-function-unit",children:"Special function unit"})}),(0,i.jsx)(n.li,{className:"toc-item toc-item-h3",children:(0,i.jsx)(n.a,{className:"toc-link toc-link-h3",href:"#loadstore-unit",children:"Load/store unit"})})]})]}),(0,i.jsx)(n.li,{className:"toc-item toc-item-h2",children:(0,i.jsx)(n.a,{className:"toc-link toc-link-h2",href:"#warp",children:"Warp"})}),(0,i.jsxs)(n.li,{className:"toc-item toc-item-h2",children:[(0,i.jsx)(n.a,{className:"toc-link toc-link-h2",href:"#memory",children:"Memory"}),(0,i.jsx)(n.ol,{className:"toc-level toc-level-3",children:(0,i.jsx)(n.li,{className:"toc-item toc-item-h3",children:(0,i.jsx)(n.a,{className:"toc-link toc-link-h3",href:"#memory-coalescing",children:"Memory coalescing"})})})]}),(0,i.jsxs)(n.li,{className:"toc-item toc-item-h2",children:[(0,i.jsx)(n.a,{className:"toc-link toc-link-h2",href:"#drivers-archlinux",children:"Drivers (archlinux)"}),(0,i.jsxs)(n.ol,{className:"toc-level toc-level-3",children:[(0,i.jsx)(n.li,{className:"toc-item toc-item-h3",children:(0,i.jsx)(n.a,{className:"toc-link toc-link-h3",href:"#interacting-with-cuda",children:"Interacting with CUDA"})}),(0,i.jsx)(n.li,{className:"toc-item toc-item-h3",children:(0,i.jsx)(n.a,{className:"toc-link toc-link-h3",href:"#numba",children:"Numba"})})]})]})]})]}),(0,i.jsxs)(n.li,{className:"toc-item toc-item-h1",children:[(0,i.jsx)(n.a,{className:"toc-link toc-link-h1",href:"#rocm-amd",children:"ROCm (AMD)"}),(0,i.jsx)(n.ol,{className:"toc-level toc-level-2",children:(0,i.jsx)(n.li,{className:"toc-item toc-item-h2",children:(0,i.jsx)(n.a,{className:"toc-link toc-link-h2",href:"#hip",children:"HIP"})})})]}),(0,i.jsxs)(n.li,{className:"toc-item toc-item-h1",children:[(0,i.jsx)(n.a,{className:"toc-link toc-link-h1",href:"#software-stacks",children:"Software stacks"}),(0,i.jsxs)(n.ol,{className:"toc-level toc-level-2",children:[(0,i.jsx)(n.li,{className:"toc-item toc-item-h2",children:(0,i.jsx)(n.a,{className:"toc-link toc-link-h2",href:"#tinygrad",children:"Tinygrad"})}),(0,i.jsx)(n.li,{className:"toc-item toc-item-h2",children:(0,i.jsx)(n.a,{className:"toc-link toc-link-h2",href:"#pytorch",children:"Pytorch"})}),(0,i.jsx)(n.li,{className:"toc-item toc-item-h2",children:(0,i.jsx)(n.a,{className:"toc-link toc-link-h2",href:"#jax",children:"Jax"})})]})]}),(0,i.jsx)(n.li,{className:"toc-item toc-item-h1",children:(0,i.jsx)(n.a,{className:"toc-link toc-link-h1",href:"#tensor-abstraction",children:"Tensor abstraction"})}),(0,i.jsx)(n.li,{className:"toc-item toc-item-h1",children:(0,i.jsx)(n.a,{className:"toc-link toc-link-h1",href:"#define",children:"Define"})}),(0,i.jsxs)(n.li,{className:"toc-item toc-item-h1",children:[(0,i.jsx)(n.a,{className:"toc-link toc-link-h1",href:"#resources",children:"Resources"}),(0,i.jsxs)(n.ol,{className:"toc-level toc-level-2",children:[(0,i.jsx)(n.li,{className:"toc-item toc-item-h2",children:(0,i.jsx)(n.a,{className:"toc-link toc-link-h2",href:"#top",children:"Top"})}),(0,i.jsx)(n.li,{className:"toc-item toc-item-h2",children:(0,i.jsx)(n.a,{className:"toc-link toc-link-h2",href:"#other",children:"Other"})})]})]})]})}),"\n",(0,i.jsx)(n.h1,{id:"taxonomy",children:"Taxonomy"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://yosefk.com/blog/simd-simt-smt-parallelism-in-nvidia-gpus.html",children:"https://yosefk.com/blog/simd-simt-smt-parallelism-in-nvidia-gpus.html"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://www.stuffedcow.net/files/gpuarch-ispass2010.pdf",children:"https://www.stuffedcow.net/files/gpuarch-ispass2010.pdf"})}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"SIMT"}),"\n",(0,i.jsx)(a.Z,{id:"fig-cpu-vs-gpu",description:"Figure 1. CPU vs GPU",source:"https://modal.com/gpu-glossary/device-hardware/streaming-multiprocessor",children:(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"images/cpu-vs-gpu.svg",alt:"alt text",title:"cpu-vs-gpu"})})}),"\n",(0,i.jsx)(n.h1,{id:"gpgpu",children:"GPGPU"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["archlinux wiki for GPGPU: ",(0,i.jsx)(n.a,{href:"https://wiki.archlinux.org/title/GPGPU",children:"https://wiki.archlinux.org/title/GPGPU"})]}),"\n",(0,i.jsxs)(n.li,{children:["what is GPGPU: ",(0,i.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/General-purpose_computing_on_graphics_processing_units",children:"https://en.wikipedia.org/wiki/General-purpose_computing_on_graphics_processing_units"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"GPGPU"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"OpenCL"}),"\n",(0,i.jsx)(n.li,{children:"CUDA (NVIDIA)"}),"\n",(0,i.jsx)(n.li,{children:"ROCm (AMD)"}),"\n"]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Feature"}),(0,i.jsx)(n.th,{children:"CUDA (NVIDIA)"}),(0,i.jsx)(n.th,{children:"OpenCL (on NVIDIA)"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Support"}),(0,i.jsx)(n.td,{children:"NVIDIA GPUs only"}),(0,i.jsx)(n.td,{children:"NVIDIA, AMD, Intel, CPUs, FPGAs, etc"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Performance"}),(0,i.jsx)(n.td,{children:"Generally higher, more optimized"}),(0,i.jsx)(n.td,{children:"Good, but usually lower than CUDA"})]})]})]}),"\n",(0,i.jsx)(n.h1,{id:"opencl",children:"OpenCL"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["OpenCL: ",(0,i.jsx)(n.a,{href:"https://www.khronos.org/opencl/",children:"https://www.khronos.org/opencl/"})]}),"\n",(0,i.jsxs)(n.li,{children:["Wikipedia: ",(0,i.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/OpenCL",children:"https://en.wikipedia.org/wiki/OpenCL"})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["OpenCL is a standard for cross-platform parallel programming of diverse accelerators. As such it is not CUDA specific, but targets CPUs, GPUs, DSPs and FPGAs. The OpenCL API specification enables each chip to have its own OpenCL drivers tuned to its specific architecture. To be conformant to OpenCL, hardware vendors must become OpenCL ",(0,i.jsx)(n.em,{children:"Adapters"})," and submit their conformance test results for review. NVIDIA is OpenCL conformant, which allow us to use the C API provided by OpenCL to directly call the ",(0,i.jsx)(n.em,{children:"NVIDIA runtime"}),". This means that learning OpenCL will translate to other platforms as well, since they have to conform to the OpenCL specification if they are conformant."]}),"\n",(0,i.jsx)(n.h1,{id:"cuda-nvidia",children:"CUDA (NVIDIA)"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"Compute Unified Device Architecture (CUDA)"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"SM -> Warp -> Block -> Grid -> Kernel"}),"\n",(0,i.jsx)(n.h2,{id:"terminology",children:"Terminology"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Streaming Multiprocessors (SM)"}),(0,i.jsx)(n.td,{})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Warp"}),(0,i.jsx)(n.td,{children:"A group of 32 threads."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Warp scheduler"}),(0,i.jsx)(n.td,{children:"A dedicated scheduler for optimizing the execution flow of warps."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Thread group"}),(0,i.jsx)(n.td,{})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"CUDA core"}),(0,i.jsx)(n.td,{})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Tensor core"}),(0,i.jsx)(n.td,{})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Special function unit"}),(0,i.jsx)(n.td,{})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Load/store unit"}),(0,i.jsx)(n.td,{})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"streaming-multiprocessor-sm",children:"Streaming Multiprocessor (SM)"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"Streaming Multiprocessors"})," (SMs) is the fundamental processing unit within NVIDIA GPUs (See ",(0,i.jsx)(n.a,{href:"#fig-h100-sm",children:"Figure 2"})," for an overview of NVIDIA's H100 GPU SM). SMs are roughly analogous to CPU cores. Both execute computations and store state. However, compared to CPU cores, GPU SMs are simple and weaker processors. Execution in SMs is pipelined within an instruction (as in most CPUs since the 1990s), but there is no speculative execution or instruction pointer prediction (as in most CPUs these days)."]}),"\n",(0,i.jsxs)(n.p,{children:["GPU SMs can execute more threads in parallel than CPUs. The H100 GPU can execute more than 16 000 threads (132 SMs x 32 threads x 4 warps > 16 000), while e.g., the ",(0,i.jsx)(n.a,{href:"https://www.techpowerup.com/cpu-specs/epyc-9965.c3904",children:"AMD EPYC 9965"})," uses a total of 384 threads. However, most consumer-grade CPUs are far from even that amount of threads."]}),"\n",(0,i.jsxs)(n.p,{children:["GPU SMs support a large number of ",(0,i.jsx)(n.em,{children:"concurrent"})," threads, i.e., threads that can be interleaved. A single SM on the H100 can concurrently execute up to 2048 threads split across 64 thread groups of 32 threads each. That means that the whole H100 with its 132 SMs can execute a total of 250k concurrent threads."]}),"\n",(0,i.jsx)(a.Z,{id:"fig-h100-sm",description:"Figure 2. A diagram of the internal architecture of an H100 GPU's Streaming Multiprocessors",source:"https://modal.com/gpu-glossary/device-hardware/streaming-multiprocessor",children:(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"images/h100-sm.svg",alt:"alt text",title:"cpu-vs-gpu"})})}),"\n",(0,i.jsx)(n.h2,{id:"brief",children:"Brief"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The host is the CPU available in the system. The system memory associated with the CPU is called host memory."}),"\n",(0,i.jsx)(n.li,{children:"The GPU is called a device and GPU memory likewise called device memory."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"To execute any CUDA program, there are three main steps:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Copy the input data from host memory to device memory, also known as host-to-device transfer."}),"\n",(0,i.jsx)(n.li,{children:"Load the GPU program and execute, caching data on-chip for performance."}),"\n",(0,i.jsx)(n.li,{children:"Copy the results from device memory to host memory, also called device-to-host transfer."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Every CUDA kernel starts with a ",(0,i.jsx)(n.strong,{children:"global"})," declaration specifier. Programmers provide a unique global ID to each thread by using built-in variables."]}),"\n",(0,i.jsx)(n.p,{children:"A group of threads is called a CUDA block. CUDA blocks are grouped into a grid. A kernel is executed as a grid of blocks of threads (Figure 2)."}),"\n",(0,i.jsx)(n.p,{children:"Each CUDA block is executed by one streaming multiprocessor (SM) and cannot be migrated to other SMs in GPU (except during preemption, debugging, or CUDA dynamic parallelism). One SM can run several concurrent CUDA blocks depending on the resources needed by CUDA blocks. Each kernel is executed on one device and CUDA supports running multiple kernels on a device at one time."}),"\n",(0,i.jsx)(n.p,{children:"The CUDA programming model provides three key language extensions to programmers:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"CUDA blocks—A collection or group of threads."}),"\n",(0,i.jsx)(n.li,{children:"Shared memory—Memory shared within a block among all threads."}),"\n",(0,i.jsx)(n.li,{children:"Synchronization barriers— Enable multiple threads to wait until all threads have reached a particular point of execution before any thread continues."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"There are also many third-party tool-chains available:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://developer.nvidia.com/pycuda",children:"PyCUDA"})," — Use CUDA API operations from a Python interface."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://developer.nvidia.com/opencl",children:"OpenCL"})," —Use low-level API operations to program CUDA GPUs."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Three step processing in heterogeneous architecture:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"CPU - Bridge - CPU memory"}),"\n",(0,i.jsx)(n.li,{children:"PCIe or NVLink Bus"}),"\n",(0,i.jsx)(n.li,{children:"GigaThread - Interconnect - L2 - DRAM"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Steps:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"We have to copy from the CPU to the GPU."}),"\n",(0,i.jsx)(n.li,{children:"Do the work, running CUDA kernels."}),"\n",(0,i.jsx)(n.li,{children:"Copy results back to CPU memory from GPU memory."}),"\n"]}),"\n",(0,i.jsxs)(n.details,{className:"code-accordion",open:!0,children:[(0,i.jsx)(n.summary,{className:"code-accordion-summary",children:"C"}),(0,i.jsx)(n.div,{className:"code-accordion-content",children:(0,i.jsx)(n.div,{className:"remark-highlight",children:(0,i.jsx)(n.pre,{className:"language-c",children:(0,i.jsxs)(n.code,{className:"language-c",children:["__global__ ",(0,i.jsx)(n.span,{className:"token keyword",children:"void"})," ",(0,i.jsx)(n.span,{className:"token function",children:"mykernel"}),(0,i.jsx)(n.span,{className:"token punctuation",children:"("}),(0,i.jsx)(n.span,{className:"token keyword",children:"void"}),(0,i.jsx)(n.span,{className:"token punctuation",children:")"})," ",(0,i.jsx)(n.span,{className:"token punctuation",children:"{"}),"\n\n",(0,i.jsx)(n.span,{className:"token punctuation",children:"}"}),"\n"]})})})})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"__global__"})," indicates that a function:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Runs on the device"}),"\n",(0,i.jsx)(n.li,{children:"Is called from the host code (can also be called from other device code)"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"nvcc"})," separates source code into host and device components:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Device functions (e.g., ",(0,i.jsx)(n.code,{children:"mykernel()"}),") processed by NVIDIA compiler"]}),"\n",(0,i.jsxs)(n.li,{children:["Host functions (e.g., ",(0,i.jsx)(n.code,{children:"main()"}),") processed by standard host compiler."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["We need a way to call this on the GPU. ",(0,i.jsx)(n.em,{children:"Kernel launch"})," or ",(0,i.jsx)(n.em,{children:"triple angle brackets"})," will mark a call to device code:"]}),"\n",(0,i.jsxs)(n.details,{className:"code-accordion",open:!0,children:[(0,i.jsx)(n.summary,{className:"code-accordion-summary",children:"C"}),(0,i.jsx)(n.div,{className:"code-accordion-content",children:(0,i.jsx)(n.div,{className:"remark-highlight",children:(0,i.jsx)(n.pre,{className:"language-c",children:(0,i.jsxs)(n.code,{className:"language-c",children:["mykernel",(0,i.jsx)(n.span,{className:"token operator",children:"<<"}),(0,i.jsx)(n.span,{className:"token operator",children:"<"}),(0,i.jsx)(n.span,{className:"token number",children:"1"}),(0,i.jsx)(n.span,{className:"token punctuation",children:","}),(0,i.jsx)(n.span,{className:"token number",children:"1"}),(0,i.jsx)(n.span,{className:"token operator",children:">>"}),(0,i.jsx)(n.span,{className:"token operator",children:">"}),(0,i.jsx)(n.span,{className:"token punctuation",children:"("}),(0,i.jsx)(n.span,{className:"token punctuation",children:")"}),(0,i.jsx)(n.span,{className:"token punctuation",children:";"}),"\n"]})})})})]}),"\n",(0,i.jsx)(n.p,{children:"The parameters inside the brackets are the CUDA kernel execution configuration."}),"\n",(0,i.jsxs)(n.p,{children:["What about memory management? Host and device memory are separate entities. ",(0,i.jsx)(n.em,{children:"Device"})," pointers point to GPU memory."]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Typically passed to device code."}),"\n",(0,i.jsxs)(n.li,{children:["Typically ",(0,i.jsx)(n.strong,{children:"not"})," dereferenced in host code."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"Host"})," pointers point to CPU memory:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Typically ",(0,i.jsx)(n.strong,{children:"not"})," passed to device code."]}),"\n",(0,i.jsxs)(n.li,{children:["Typically ",(0,i.jsx)(n.strong,{children:"not"})," dereferenced in device code."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"(Special cases: Pinned pointers, ATS, managed memory)"}),"\n",(0,i.jsx)(n.p,{children:"Simple CUDA API for handling device memory:"}),"\n",(0,i.jsxs)(n.details,{className:"code-accordion",open:!0,children:[(0,i.jsx)(n.summary,{className:"code-accordion-summary",children:"C"}),(0,i.jsx)(n.div,{className:"code-accordion-content",children:(0,i.jsx)(n.div,{className:"remark-highlight",children:(0,i.jsx)(n.pre,{className:"language-c",children:(0,i.jsxs)(n.code,{className:"language-c",children:[(0,i.jsx)(n.span,{className:"token function",children:"cudaMalloc"}),(0,i.jsx)(n.span,{className:"token punctuation",children:"("}),(0,i.jsx)(n.span,{className:"token punctuation",children:")"}),(0,i.jsx)(n.span,{className:"token punctuation",children:","})," ",(0,i.jsx)(n.span,{className:"token function",children:"cudaFree"}),(0,i.jsx)(n.span,{className:"token punctuation",children:"("}),(0,i.jsx)(n.span,{className:"token punctuation",children:")"}),(0,i.jsx)(n.span,{className:"token punctuation",children:","})," ",(0,i.jsx)(n.span,{className:"token function",children:"cudaMemcpy"}),(0,i.jsx)(n.span,{className:"token punctuation",children:"("}),(0,i.jsx)(n.span,{className:"token punctuation",children:")"})," ",(0,i.jsx)(n.span,{className:"token comment",children:"// similar to C equivalents"}),"\n"]})})})})]}),"\n",(0,i.jsx)(n.h2,{id:"cuda-programming-model",children:"CUDA programming model"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.p,{children:["The CUDA programming model allows the programmer to define C++ functions, called ",(0,i.jsx)(n.em,{children:"kernels"}),", which are executed N times in parallel by N different CUDA threads when they are invoked (depending on configuration). A kernel is defined using the ",(0,i.jsx)(n.code,{children:"__global__"})," declaration specifier like so:"]}),"\n",(0,i.jsxs)(n.details,{className:"code-accordion",open:!0,children:[(0,i.jsx)(n.summary,{className:"code-accordion-summary",children:"C"}),(0,i.jsx)(n.div,{className:"code-accordion-content",children:(0,i.jsx)(n.div,{className:"remark-highlight",children:(0,i.jsx)(n.pre,{className:"language-c",children:(0,i.jsxs)(n.code,{className:"language-c",children:[(0,i.jsx)(n.span,{className:"token comment",children:"// Kernel definition"}),"\n__global__ ",(0,i.jsx)(n.span,{className:"token keyword",children:"void"})," ",(0,i.jsx)(n.span,{className:"token function",children:"VecAdd"}),(0,i.jsx)(n.span,{className:"token punctuation",children:"("}),(0,i.jsx)(n.span,{className:"token keyword",children:"float"}),(0,i.jsx)(n.span,{className:"token operator",children:"*"})," A",(0,i.jsx)(n.span,{className:"token punctuation",children:","})," ",(0,i.jsx)(n.span,{className:"token keyword",children:"float"}),(0,i.jsx)(n.span,{className:"token operator",children:"*"})," B",(0,i.jsx)(n.span,{className:"token punctuation",children:","})," ",(0,i.jsx)(n.span,{className:"token keyword",children:"float"}),(0,i.jsx)(n.span,{className:"token operator",children:"*"})," C",(0,i.jsx)(n.span,{className:"token punctuation",children:")"}),"\n",(0,i.jsx)(n.span,{className:"token punctuation",children:"{"}),"\n    ",(0,i.jsx)(n.span,{className:"token keyword",children:"int"})," i ",(0,i.jsx)(n.span,{className:"token operator",children:"="})," threadIdx",(0,i.jsx)(n.span,{className:"token punctuation",children:"."}),"x",(0,i.jsx)(n.span,{className:"token punctuation",children:";"}),"\n    C",(0,i.jsx)(n.span,{className:"token punctuation",children:"["}),"i",(0,i.jsx)(n.span,{className:"token punctuation",children:"]"})," ",(0,i.jsx)(n.span,{className:"token operator",children:"="})," A",(0,i.jsx)(n.span,{className:"token punctuation",children:"["}),"i",(0,i.jsx)(n.span,{className:"token punctuation",children:"]"})," ",(0,i.jsx)(n.span,{className:"token operator",children:"+"})," B",(0,i.jsx)(n.span,{className:"token punctuation",children:"["}),"i",(0,i.jsx)(n.span,{className:"token punctuation",children:"]"}),(0,i.jsx)(n.span,{className:"token punctuation",children:";"}),"\n",(0,i.jsx)(n.span,{className:"token punctuation",children:"}"}),"\n",(0,i.jsx)(n.span,{className:"token keyword",children:"int"})," ",(0,i.jsx)(n.span,{className:"token function",children:"main"}),(0,i.jsx)(n.span,{className:"token punctuation",children:"("}),(0,i.jsx)(n.span,{className:"token punctuation",children:")"}),"\n",(0,i.jsx)(n.span,{className:"token punctuation",children:"{"}),"\n    ",(0,i.jsx)(n.span,{className:"token punctuation",children:"."}),(0,i.jsx)(n.span,{className:"token punctuation",children:"."}),(0,i.jsx)(n.span,{className:"token punctuation",children:"."}),"\n    ",(0,i.jsx)(n.span,{className:"token comment",children:"// Kernel invocation with N threads"}),"\n    VecAdd",(0,i.jsx)(n.span,{className:"token operator",children:"<<"}),(0,i.jsx)(n.span,{className:"token operator",children:"<"}),(0,i.jsx)(n.span,{className:"token number",children:"1"}),(0,i.jsx)(n.span,{className:"token punctuation",children:","})," N",(0,i.jsx)(n.span,{className:"token operator",children:">>"}),(0,i.jsx)(n.span,{className:"token operator",children:">"}),(0,i.jsx)(n.span,{className:"token punctuation",children:"("}),"A",(0,i.jsx)(n.span,{className:"token punctuation",children:","})," B",(0,i.jsx)(n.span,{className:"token punctuation",children:","})," C",(0,i.jsx)(n.span,{className:"token punctuation",children:")"}),(0,i.jsx)(n.span,{className:"token punctuation",children:";"}),"\n    ",(0,i.jsx)(n.span,{className:"token punctuation",children:"."}),(0,i.jsx)(n.span,{className:"token punctuation",children:"."}),(0,i.jsx)(n.span,{className:"token punctuation",children:"."}),"\n",(0,i.jsx)(n.span,{className:"token punctuation",children:"}"}),"\n"]})})})})]}),"\n",(0,i.jsxs)(n.p,{children:["Using the ",(0,i.jsx)(n.code,{children:"<<<...>>>"})," syntax we can specify the ",(0,i.jsx)(n.em,{children:"execution configuration"}),". In the above example we specify that the kernel ",(0,i.jsx)(n.code,{children:"VecAdd"})," should be executed on N different CUDA threads."]}),"\n",(0,i.jsx)(n.h2,{id:"core",children:"Core"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"cuda-core",children:"CUDA core"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"tensor-core",children:"Tensor core"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"units",children:"Units"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"special-function-unit",children:"Special function unit"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"loadstore-unit",children:"Load/store unit"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"warp",children:"Warp"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"memory",children:"Memory"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"memory-coalescing",children:"Memory coalescing"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["memory coalescing: ",(0,i.jsx)(n.a,{href:"https://homepages.math.uic.edu/~jan/mcs572f16/mcs572notes/lec35.html",children:"https://homepages.math.uic.edu/~jan/mcs572f16/mcs572notes/lec35.html"})]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"drivers-archlinux",children:"Drivers (archlinux)"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"Run"}),"\n",(0,i.jsxs)(n.details,{className:"code-accordion",open:!0,children:[(0,i.jsx)(n.summary,{className:"code-accordion-summary",children:"Sh"}),(0,i.jsx)(n.div,{className:"code-accordion-content",children:(0,i.jsx)(n.div,{className:"remark-highlight",children:(0,i.jsx)(n.pre,{className:"language-sh",children:(0,i.jsxs)(n.code,{className:"language-sh",children:["$ lspci ",(0,i.jsx)(n.span,{className:"token parameter variable",children:"-k"})," ",(0,i.jsx)(n.span,{className:"token parameter variable",children:"-d"})," ::03xx\n01:00.0 VGA compatible controller: NVIDIA Corporation GP104 ",(0,i.jsx)(n.span,{className:"token punctuation",children:"["}),"GeForce GTX ",(0,i.jsx)(n.span,{className:"token number",children:"1070"}),(0,i.jsx)(n.span,{className:"token punctuation",children:"]"})," ",(0,i.jsx)(n.span,{className:"token punctuation",children:"("}),"rev a1",(0,i.jsx)(n.span,{className:"token punctuation",children:")"}),"\n	Subsystem: ASUSTeK Computer Inc. Device ",(0,i.jsx)(n.span,{className:"token number",children:"8599"}),"\n	Kernel driver ",(0,i.jsx)(n.span,{className:"token keyword",children:"in"})," use: nouveau\n	Kernel modules: nouveau, nvidia_drm, nvidia\n"]})})})})]}),"\n",(0,i.jsx)(n.p,{children:"Look for your name:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://nouveau.freedesktop.org/CodeNames.html",children:"https://nouveau.freedesktop.org/CodeNames.html"})}),"\n",(0,i.jsxs)(n.p,{children:["Install correct package according to:\n",(0,i.jsxs)(n.a,{href:"https://wiki.archlinux.org/title/NVIDIA#Installation",children:["https://wiki.archlinux.org/title/NVIDIA","https://wiki.archlinux.org/title/NVIDIA#Installation"]})]}),"\n",(0,i.jsx)(n.p,{children:"Restart machine"}),"\n",(0,i.jsxs)(n.details,{className:"code-accordion",open:!0,children:[(0,i.jsx)(n.summary,{className:"code-accordion-summary",children:"Text"}),(0,i.jsx)(n.div,{className:"code-accordion-content",children:(0,i.jsx)(n.div,{className:"remark-highlight",children:(0,i.jsx)(n.pre,{className:"language-unknown",children:(0,i.jsx)(n.code,{className:"language-unknown",children:"nvidia-smi"})})})})]}),"\n",(0,i.jsxs)(n.p,{children:["Install cuda (also see ",(0,i.jsx)(n.a,{href:"https://docs.nvidia.com/deploy/cuda-compatibility/",children:"https://docs.nvidia.com/deploy/cuda-compatibility/"}),")"]}),"\n",(0,i.jsxs)(n.details,{className:"code-accordion",open:!0,children:[(0,i.jsx)(n.summary,{className:"code-accordion-summary",children:"Sh"}),(0,i.jsx)(n.div,{className:"code-accordion-content",children:(0,i.jsx)(n.div,{className:"remark-highlight",children:(0,i.jsx)(n.pre,{className:"language-sh",children:(0,i.jsxs)(n.code,{className:"language-sh",children:["pacman ",(0,i.jsx)(n.span,{className:"token parameter variable",children:"-S"})," cuda\n"]})})})})]}),"\n",(0,i.jsx)(n.p,{children:"Verify installation"}),"\n",(0,i.jsxs)(n.details,{className:"code-accordion",open:!0,children:[(0,i.jsx)(n.summary,{className:"code-accordion-summary",children:"Text"}),(0,i.jsx)(n.div,{className:"code-accordion-content",children:(0,i.jsx)(n.div,{className:"remark-highlight",children:(0,i.jsx)(n.pre,{className:"language-unknown",children:(0,i.jsx)(n.code,{className:"language-unknown",children:"nvcc --version\n"})})})})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"nvidia"}),"\n",(0,i.jsx)(n.li,{children:"nvidia-utils: provides nvidia-libgl, opengl-driver, vulkan-driver"}),"\n",(0,i.jsx)(n.li,{children:"cuda"}),"\n",(0,i.jsx)(n.li,{children:"opencl-nvidia"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"interacting-with-cuda",children:"Interacting with CUDA"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"There exists several wrappers of the CUDA API."}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["PyCUDA: ",(0,i.jsx)(n.a,{href:"https://github.com/inducer/pycuda",children:"https://github.com/inducer/pycuda"})," ",(0,i.jsx)(n.br,{}),"\n","Lets you access NVIDIA's CUDA parallel computation API from Python."]}),"\n",(0,i.jsxs)(n.li,{children:["Official CUDA API bindings: ",(0,i.jsx)(n.a,{href:"https://github.com/NVIDIA/cuda-python",children:"https://github.com/NVIDIA/cuda-python"})," ",(0,i.jsx)(n.br,{}),"\n","NVIDIA's own language bindings for the CUDA API written in Python/Cython. This is similar to (1) in abstraction level."]}),"\n",(0,i.jsxs)(n.li,{children:["Numba: ",(0,i.jsx)(n.a,{href:"https://github.com/numba/numba",children:"https://github.com/numba/numba"})," ",(0,i.jsx)(n.br,{}),"\n","NumPy-aware optimizing compiler for Python, which means it uses the LLVM compiler project to generate machine code directly from Python syntax. Numba provides a high-level interface and uses cuda-python (2) under the hood to accelerate computations when compiling for CUDA."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"numba",children:"Numba"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"Numba is an open source, NumPy-aware optimizing compiler for Python sponsored by Anaconda, Inc. It uses the LLVM compiler project to generate machine code from Python syntax.\nNumba can compile a large subset of numerically-focused Python, including many NumPy functions. Additionally, Numba has support for automatic parallelization of loops, generation of GPU-accelerated code, and creation of ufuncs and C callbacks."}),"\n"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Numba: ",(0,i.jsx)(n.a,{href:"https://numba.pydata.org/",children:"https://numba.pydata.org/"})]}),"\n",(0,i.jsxs)(n.li,{children:["Numba github: ",(0,i.jsx)(n.a,{href:"https://github.com/numba/numba",children:"https://github.com/numba/numba"})]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://numba.readthedocs.io/en/stable/cuda/index.html",children:"https://numba.readthedocs.io/en/stable/cuda/index.html"})}),"\n"]}),"\n",(0,i.jsx)(n.h1,{id:"rocm-amd",children:"ROCm (AMD)"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"ROCm"})," (Radeon Open Compute) is AMD's open-source parallel computing architecture and framework."]}),"\n",(0,i.jsx)(n.h2,{id:"hip",children:"HIP"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"HIP"})," (Heterogeneous Interface for Portability) is AMD's dedicated GPU programming environment."]}),"\n",(0,i.jsx)(n.h1,{id:"software-stacks",children:"Software stacks"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Tinygrad"}),"\n",(0,i.jsx)(n.li,{children:"Pytorch"}),"\n",(0,i.jsx)(n.li,{children:"Jax"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"tinygrad",children:"Tinygrad"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"Tinygrad takes advantage of the fact that every tensor operation is either elementwise, or reduction. The obvious advantage is to build up abstraction that makes optimization easier (think of this in the context of Complex Instruction Set Architecture vs RISC)."}),"\n",(0,i.jsx)(n.h2,{id:"pytorch",children:"Pytorch"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"jax",children:"Jax"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://github.com/jax-ml/jax",children:"https://github.com/jax-ml/jax"})}),"\n",(0,i.jsx)(n.p,{children:"JAX is a Python library for accelerator-oriented array computation and program transformation, designed for high-performance numerical computing and large-scale machine learning."}),"\n",(0,i.jsx)(n.p,{children:"JAX can automatically differentiate native Python and NumPy functions. It can differentiate through loops, branches, recursion, and closures, and it can take derivatives of derivatives of derivatives. It supports reverse-mode differentiation (a.k.a. backpropagation) via jax.grad as well as forward-mode differentiation, and the two can be composed arbitrarily to any order."}),"\n",(0,i.jsx)(n.p,{children:"JAX uses XLA to compile and scale your NumPy programs on TPUs, GPUs, and other hardware accelerators."}),"\n",(0,i.jsx)(n.h1,{id:"tensor-abstraction",children:"Tensor abstraction"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.em,{children:"Tensor"})," is a multi-dimensional matrix containing elements of a single data type."]}),"\n",(0,i.jsx)(n.h1,{id:"define",children:"Define"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"SM"}),"\n",(0,i.jsx)(n.li,{children:"CUDA programming model"}),"\n",(0,i.jsx)(n.li,{children:"GPUs are 1024 bit SIMD machines?"}),"\n"]}),"\n",(0,i.jsx)(n.h1,{id:"resources",children:"Resources"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"top",children:"Top"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["cuda c programming: ",(0,i.jsx)(n.a,{href:"https://docs.nvidia.com/cuda/cuda-c-programming-guide/",children:"https://docs.nvidia.com/cuda/cuda-c-programming-guide/"})]}),"\n",(0,i.jsxs)(n.li,{children:["Really nice glossary: ",(0,i.jsx)(n.a,{href:"https://modal.com/gpu-glossary",children:"https://modal.com/gpu-glossary"})]}),"\n",(0,i.jsxs)(n.li,{children:["cuda-training-series: ",(0,i.jsx)(n.a,{href:"https://www.olcf.ornl.gov/cuda-training-series/",children:"https://www.olcf.ornl.gov/cuda-training-series/"})]}),"\n",(0,i.jsxs)(n.li,{children:["cuda best practices: ",(0,i.jsxs)(n.a,{href:"https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#who-should-read-this-guide",children:["https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html","https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#who-should-read-this-guide"]})]}),"\n",(0,i.jsxs)(n.li,{children:["going further than cuda intro (",(0,i.jsx)(n.em,{children:"exercises"})," and ",(0,i.jsx)(n.em,{children:"where to from here"}),"): ",(0,i.jsxs)(n.a,{href:"https://developer.nvidia.com/blog/even-easier-introduction-cuda/#exercises",children:["https://developer.nvidia.com/blog/even-easier-introduction-cuda/","https://developer.nvidia.com/blog/even-easier-introduction-cuda/#exercises"]})]}),"\n",(0,i.jsxs)(n.li,{children:["demystify gpu for dl part1 (blog): ",(0,i.jsx)(n.a,{href:"https://learnopencv.com/demystifying-gpu-architectures-for-deep-learning/",children:"https://learnopencv.com/demystifying-gpu-architectures-for-deep-learning/"})]}),"\n",(0,i.jsxs)(n.li,{children:["demystify gpu for dl part2 (blog): ",(0,i.jsx)(n.a,{href:"https://learnopencv.com/demystifying-gpu-architectures-for-deep-learning-part-2/",children:"https://learnopencv.com/demystifying-gpu-architectures-for-deep-learning-part-2/"})]}),"\n",(0,i.jsxs)(n.li,{children:["modern gpu architecture explained (blog): ",(0,i.jsx)(n.a,{href:"https://learnopencv.com/modern-gpu-architecture-explained/",children:"https://learnopencv.com/modern-gpu-architecture-explained/"})]}),"\n",(0,i.jsxs)(n.li,{children:["leetgpu: ",(0,i.jsx)(n.a,{href:"https://leetgpu.com/",children:"https://leetgpu.com/"})]}),"\n",(0,i.jsxs)(n.li,{children:["leetgpu resources: ",(0,i.jsx)(n.a,{href:"https://www.leetgpu.com/resources",children:"https://www.leetgpu.com/resources"})]}),"\n",(0,i.jsxs)(n.li,{children:["supercomputing: ",(0,i.jsx)(n.a,{href:"https://homepages.math.uic.edu/~jan/mcs572f16/mcs572notes/index.html",children:"https://homepages.math.uic.edu/~jan/mcs572f16/mcs572notes/index.html"})]}),"\n",(0,i.jsxs)(n.li,{children:["fabiensanglard (blog): ",(0,i.jsx)(n.a,{href:"https://fabiensanglard.net/cuda/",children:"https://fabiensanglard.net/cuda/"})]}),"\n",(0,i.jsxs)(n.li,{children:["paul richmond lecture series: ",(0,i.jsx)(n.a,{href:"https://paulrichmond.shef.ac.uk//education/com4521",children:"https://paulrichmond.shef.ac.uk//education/com4521"})]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"other",children:"Other"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["CUDA programming guide: ",(0,i.jsx)(n.a,{href:"https://docs.nvidia.com/cuda/cuda-c-programming-guide/",children:"https://docs.nvidia.com/cuda/cuda-c-programming-guide/"})]}),"\n",(0,i.jsxs)(n.li,{children:["CUDA books archive: ",(0,i.jsx)(n.a,{href:"https://developer.nvidia.com/cuda-books-archive",children:"https://developer.nvidia.com/cuda-books-archive"})]}),"\n",(0,i.jsxs)(n.li,{children:["CUDA parallel programming: ",(0,i.jsx)(n.a,{href:"https://newfrontiers.illinois.edu/news-and-events/introduction-to-parallel-programming-with-cuda/",children:"https://newfrontiers.illinois.edu/news-and-events/introduction-to-parallel-programming-with-cuda/"})]}),"\n",(0,i.jsxs)(n.li,{children:["Triton: ",(0,i.jsx)(n.a,{href:"https://triton-lang.org/main/getting-started/tutorials/index.html",children:"https://triton-lang.org/main/getting-started/tutorials/index.html"})]}),"\n",(0,i.jsxs)(n.li,{children:["Pytorch doc: ",(0,i.jsx)(n.a,{href:"https://docs.pytorch.org/docs/stable/index.html",children:"https://docs.pytorch.org/docs/stable/index.html"})]}),"\n",(0,i.jsxs)(n.li,{children:["Pytorch tutorials: ",(0,i.jsx)(n.a,{href:"https://docs.pytorch.org/tutorials/",children:"https://docs.pytorch.org/tutorials/"})]}),"\n",(0,i.jsxs)(n.li,{children:["Pytorch zero to mastery: ",(0,i.jsx)(n.a,{href:"https://www.learnpytorch.io/",children:"https://www.learnpytorch.io/"})]}),"\n",(0,i.jsxs)(n.li,{children:["Tinygrad doc: ",(0,i.jsx)(n.a,{href:"https://docs.tinygrad.org/",children:"https://docs.tinygrad.org/"})]}),"\n",(0,i.jsxs)(n.li,{children:["Tinygrad notes: ",(0,i.jsx)(n.a,{href:"https://mesozoic-egg.github.io/tinygrad-notes/",children:"https://mesozoic-egg.github.io/tinygrad-notes/"})]}),"\n",(0,i.jsxs)(n.li,{children:["Mojo: ",(0,i.jsx)(n.a,{href:"https://docs.modular.com/mojo/manual/",children:"https://docs.modular.com/mojo/manual/"})]}),"\n",(0,i.jsxs)(n.li,{children:["cuda refresher: ",(0,i.jsx)(n.a,{href:"https://developer.nvidia.com/blog/tag/cuda-refresher/",children:"https://developer.nvidia.com/blog/tag/cuda-refresher/"})]}),"\n",(0,i.jsxs)(n.li,{children:["cuda refresher programming model: ",(0,i.jsx)(n.a,{href:"https://developer.nvidia.com/blog/cuda-refresher-cuda-programming-model/",children:"https://developer.nvidia.com/blog/cuda-refresher-cuda-programming-model/"})]}),"\n",(0,i.jsxs)(n.li,{children:["cuda c programming pdf: ",(0,i.jsx)(n.a,{href:"https://docs.nvidia.com/cuda/pdf/CUDA_C_Programming_Guide.pdf",children:"https://docs.nvidia.com/cuda/pdf/CUDA_C_Programming_Guide.pdf"})]}),"\n",(0,i.jsxs)(n.li,{children:["nvidia tesla paper: ",(0,i.jsx)(n.a,{href:"https://www.cs.cmu.edu/afs/cs/academic/class/15869-f11/www/readings/lindholm08_tesla.pdf",children:"https://www.cs.cmu.edu/afs/cs/academic/class/15869-f11/www/readings/lindholm08_tesla.pdf"})]}),"\n",(0,i.jsxs)(n.li,{children:["cuda in python part1: ",(0,i.jsx)(n.a,{href:"https://www.vincent-lunot.com/post/an-introduction-to-cuda-in-python-part-1/",children:"https://www.vincent-lunot.com/post/an-introduction-to-cuda-in-python-part-1/"})]}),"\n",(0,i.jsxs)(n.li,{children:["cuda compatibility: ",(0,i.jsx)(n.a,{href:"https://developer.nvidia.com/cuda-gpus",children:"https://developer.nvidia.com/cuda-gpus"})]}),"\n",(0,i.jsxs)(n.li,{children:["nvidia hpc: ",(0,i.jsx)(n.a,{href:"https://developer.nvidia.com/hpc",children:"https://developer.nvidia.com/hpc"})]}),"\n",(0,i.jsxs)(n.li,{children:["archlinux gpgpu: ",(0,i.jsx)(n.a,{href:"https://wiki.archlinux.org/title/GPGPU",children:"https://wiki.archlinux.org/title/GPGPU"})]}),"\n",(0,i.jsxs)(n.li,{children:["cuda python: ",(0,i.jsx)(n.a,{href:"https://developer.nvidia.com/cuda-python",children:"https://developer.nvidia.com/cuda-python"})]}),"\n",(0,i.jsxs)(n.li,{children:["cuda python doc: ",(0,i.jsx)(n.a,{href:"https://nvidia.github.io/cuda-python/latest/",children:"https://nvidia.github.io/cuda-python/latest/"})]}),"\n",(0,i.jsxs)(n.li,{children:["cuda python github: ",(0,i.jsx)(n.a,{href:"https://github.com/NVIDIA/cuda-python/tree/main",children:"https://github.com/NVIDIA/cuda-python/tree/main"})]}),"\n",(0,i.jsxs)(n.li,{children:["opencl: ",(0,i.jsxs)(n.a,{href:"https://www.khronos.org/opencl/#ocl-overview",children:["https://www.khronos.org/opencl/","https://www.khronos.org/opencl/#ocl-overview"]})]}),"\n",(0,i.jsxs)(n.li,{children:["archlinux nvidia: ",(0,i.jsx)(n.a,{href:"https://wiki.archlinux.org/title/NVIDIA",children:"https://wiki.archlinux.org/title/NVIDIA"})]}),"\n",(0,i.jsxs)(n.li,{children:["nvidia codenames: ",(0,i.jsx)(n.a,{href:"https://nouveau.freedesktop.org/CodeNames.html",children:"https://nouveau.freedesktop.org/CodeNames.html"})]}),"\n",(0,i.jsxs)(n.li,{children:["numba nvidia guide: ",(0,i.jsx)(n.a,{href:"https://developer.nvidia.com/blog/numba-python-cuda-acceleration/",children:"https://developer.nvidia.com/blog/numba-python-cuda-acceleration/"})]}),"\n",(0,i.jsxs)(n.li,{children:["numba docs: ",(0,i.jsx)(n.a,{href:"https://numba.readthedocs.io/en/stable/",children:"https://numba.readthedocs.io/en/stable/"})]}),"\n",(0,i.jsxs)(n.li,{children:["nvidia tech blog: ",(0,i.jsx)(n.a,{href:"https://developer.nvidia.com/blog/",children:"https://developer.nvidia.com/blog/"})]}),"\n",(0,i.jsxs)(n.li,{children:["tiny-gpu: ",(0,i.jsx)(n.a,{href:"https://github.com/adam-maj/tiny-gpu",children:"https://github.com/adam-maj/tiny-gpu"})]}),"\n",(0,i.jsxs)(n.li,{children:["cuda-training-series github: ",(0,i.jsx)(n.a,{href:"https://github.com/olcf/cuda-training-series/tree/master/exercises",children:"https://github.com/olcf/cuda-training-series/tree/master/exercises"})]}),"\n",(0,i.jsxs)(n.li,{children:["easy intro to cuda: ",(0,i.jsx)(n.a,{href:"https://developer.nvidia.com/blog/even-easier-introduction-cuda/",children:"https://developer.nvidia.com/blog/even-easier-introduction-cuda/"})]}),"\n",(0,i.jsxs)(n.li,{children:["cub: ",(0,i.jsx)(n.a,{href:"https://nvidia.github.io/cccl/cub/",children:"https://nvidia.github.io/cccl/cub/"})]}),"\n",(0,i.jsxs)(n.li,{children:["cutlass: cuda templates for linear algebra subroutines: ",(0,i.jsx)(n.a,{href:"https://github.com/NVIDIA/cutlass",children:"https://github.com/NVIDIA/cutlass"})]}),"\n",(0,i.jsxs)(n.li,{children:["gpu-puzzles: ",(0,i.jsx)(n.a,{href:"https://github.com/srush/GPU-Puzzles",children:"https://github.com/srush/GPU-Puzzles"})]}),"\n",(0,i.jsxs)(n.li,{children:["what is a gpu: ",(0,i.jsx)(n.a,{href:"https://kernel-operations.io/keops/autodiff_gpus/what_is_a_gpu.html",children:"https://kernel-operations.io/keops/autodiff_gpus/what_is_a_gpu.html"})]}),"\n",(0,i.jsxs)(n.li,{children:["experiment with printf cuda: ",(0,i.jsxs)(n.a,{href:"https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#formatted-output",children:["https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html","https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#formatted-output"]})]}),"\n",(0,i.jsxs)(n.li,{children:["applied GPU programming: ",(0,i.jsx)(n.a,{href:"https://www.youtube.com/playlist?list=PLPJwWVtf19Wgx_bupSDDSStSv-tOGGWRO",children:"https://www.youtube.com/playlist?list=PLPJwWVtf19Wgx_bupSDDSStSv-tOGGWRO"})]}),"\n",(0,i.jsxs)(n.li,{children:["cuda ptx interop: ",(0,i.jsx)(n.a,{href:"https://docs.nvidia.com/cuda/pdf/PTX_Writers_Guide_To_Interoperability.pdf",children:"https://docs.nvidia.com/cuda/pdf/PTX_Writers_Guide_To_Interoperability.pdf"})]}),"\n",(0,i.jsxs)(n.li,{children:["gpu mode: ",(0,i.jsxs)(n.a,{href:"https://www.youtube.com/@GPUMODE",children:["https://www.youtube.com/","(",")"]})]}),"\n",(0,i.jsxs)(n.li,{children:["numba cuda: ",(0,i.jsx)(n.a,{href:"https://nvidia.github.io/numba-cuda/user/index.html",children:"https://nvidia.github.io/numba-cuda/user/index.html"})]}),"\n",(0,i.jsxs)(n.li,{children:["opencl registry: ",(0,i.jsx)(n.a,{href:"https://registry.khronos.org/OpenCL/",children:"https://registry.khronos.org/OpenCL/"})]}),"\n",(0,i.jsxs)(n.li,{children:["turing arch whitepaper: ",(0,i.jsx)(n.a,{href:"https://fabiensanglard.net/cuda/Turing-Architecture-Whitepaper.pdf",children:"https://fabiensanglard.net/cuda/Turing-Architecture-Whitepaper.pdf"})]}),"\n",(0,i.jsxs)(n.li,{children:["rust GPU: ",(0,i.jsx)(n.a,{href:"https://rust-gpu.github.io/blog/2025/07/25/rust-on-every-gpu/",children:"https://rust-gpu.github.io/blog/2025/07/25/rust-on-every-gpu/"})]}),"\n"]})]})}function o(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return(0,i.jsx)(t,{...e,children:(0,i.jsx)(l,{...e})})}},6282:function(e,n,s){"use strict";function i(e){return e}s.d(n,{a:function(){return i}})}},function(e){e.O(0,[976,603,90,774,888,179],function(){return e(e.s=4478)}),_N_E=e.O()}]);