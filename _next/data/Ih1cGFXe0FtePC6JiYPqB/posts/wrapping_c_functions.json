{"pageProps":{"post":{"title":"Wrapping C functions","date":"2024-01-05","slug":"wrapping_c_functions","content":"<p>Let's say you want to overwrite an API-function located in a library that you don't have any control over or a standard\nlibrary function. This is useful when you want to stub that function in some test bench or insert debugging information\nin the function itself. To do this, we can make use of C-macros. Let's say we want to overwrite <code>malloc</code>. We first\ndefine our own malloc like so:</p>\n<div class=\"remark-highlight\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">my_malloc</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">size_t</span> size <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"my_malloc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Then we can define the following macro to replace all instances of <code>malloc</code> with our newly defined <code>my_malloc</code>:</p>\n<div class=\"remark-highlight\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">malloc</span> <span class=\"token expression\">my_malloc</span></span>\n</code></pre></div>\n<p>Compiling and running yields us:</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">></span> clang main.c <span class=\"token operator\">&#x26;&#x26;</span> ./a.out\nmy_malloc\n</code></pre></div>\n<p>What if we want to make use of the original <code>malloc</code> in our newly created <code>my_malloc</code>? This could be problematic as the define replaces all instances of <code>malloc</code> with <code>my_malloc</code>. So creating a <code>my_malloc</code> like this will cause the macro to be recursively executed:</p>\n<div class=\"remark-highlight\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">my_malloc</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">size_t</span> size <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"my_malloc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Compling and running this instead will result in:</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">></span> clang main.c <span class=\"token operator\">&#x26;&#x26;</span> ./a.out\nmy_mallocmy_mallocm<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>y_malloSegmentation fault <span class=\"token punctuation\">(</span>core dumped<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>Where the dots represent <code>my_malloc</code> being printed MANY times.</p>\n<p>To make this work, we have to place <code>my_malloc</code> in a separate source file. Since source files are preprocessed to\ntranslation units along with all the includes and compiled separately from each other, a define in e.g., <code>main.c</code> will not affect a wrapper in e.g., <code>malloc.c</code>. So we create the following files:</p>\n<div class=\"remark-highlight\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// malloc.c</span>\n<span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">my_malloc</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span> size<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"my_malloc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// main.c</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">malloc</span> <span class=\"token expression\">my_malloc</span></span>\n\n<span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">my_malloc</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> ptr <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Now it is possible to compile and execute without all those recursive calls:</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">></span> clang main.c malloc.c <span class=\"token operator\">&#x26;&#x26;</span> ./a.out\nmy_malloc\n</code></pre></div>\n<p>We can now wrap the function declaration in a header file and include it wherever we want to\noverwrite <code>malloc</code>:</p>\n<div class=\"remark-highlight\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// malloc.h</span>\n<span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">my_malloc</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>This is useful. This header file can be included for source files in a test bench to add behavior that we only\nwant to execute during a test. Thinking more broadly, this could e.g., be us stubbing some API to give as a\nbehavior or value that we are in control over during a test.</p>"}},"__N_SSG":true}